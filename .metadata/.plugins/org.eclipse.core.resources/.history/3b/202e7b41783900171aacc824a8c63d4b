import java.io.*;
import java.util.*;
public class Basic_graphs {
    static int V;
	static int E;
	static ArrayList<Integer> graph[];
	static InputReader in=new InputReader(System.in);
	static PrintWriter out=new PrintWriter(System.out);
	public static void main(String args[])
	{
	     V=in.readInt();
	     E=in.readInt();
	     /*
	        4
			6
			1 2
			2 3
			3 4
			4 1
			2 4
			3 1
			6
			8
			1 2
			1 6
			2 3
			2 5
			6 3
			6 5
			3 4
			5 4
	      */
	     graph=new ArrayList[V+1];
	     for(int i=1;i<=V;i++)
	    	 graph[i]=new ArrayList<Integer>();
	     for(int i=0;i<E;i++)
	     	 graph[in.readInt()].add(in.readInt());
	     bfs(2);
	     dfs(2);
	     out.println(connected(1));
	     out.flush();
	     out.close();
	}
	public static void bfs(int start)
	{
		Queue<Integer> q=new LinkedList<Integer>();
		q.add(start);
		boolean visited[]=new boolean[V+1];
		visited[start]=true;
		String ans="";
		while(!q.isEmpty())
		{
			int tp=q.poll();
			ans=ans+Integer.toString(tp)+" ";
			for(int i:graph[tp])
			{
				if(!visited[i])
				{
					q.add(i);
					visited[i]=true;
				}
			}
		}
		out.println(ans);
	}
	public static void dfs(int start)
	{
		Stack<Integer> st=new Stack<Integer>();
		st.push(start);
		int visited[]=new int[V+1];
		String ans=Integer.toString(start)+" ";
		while(!st.isEmpty())
		{
			int tp=st.peek();
			if(visited[tp]<graph[tp].size())
			{
				int x=graph[tp].get(visited[tp]++);
				if(visited[x]==0)
				{
					st.push(x);
					ans=ans+Integer.toString(x)+" ";
				}
			}
			else
				st.pop();
		}
		out.println(ans);
	}
	public static boolean connected(int start)
	{
		Queue<Integer> q=new LinkedList<Integer>();
		q.add(start);
		boolean visited[]=new boolean[V+1];
		visited[start]=true;
		boolean flag=true;
		while(!q.isEmpty())
		{
			int tp=q.poll();
			for(int i:graph[tp])
			{
				if(!visited[i])
				{
					q.add(i);
					visited[i]=true;
				}
			}
		}
		for(int i=1;i<=V;i++)
			if(!visited[i])
			{
				flag=false;
				break;
			}
		return flag;
	}
}
class InputReader{
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;
	
	public InputReader(InputStream stream){this.stream = stream;}
	public int read(){
		if (numChars==-1) throw new InputMismatchException();
		if (curChar >= numChars){
			curChar = 0;
			try {numChars = stream.read(buf);}
			catch (IOException e){throw new InputMismatchException();}
			if(numChars <= 0) return -1;
		}
		return buf[curChar++];
	}
 
	public int readInt(){
		int c = read();
		while(isSpaceChar(c)) c = read();
		int sgn = 1;
		if (c == '-') {sgn = -1;c = read();}
		int res = 0;
		do {
			if(c<'0'||c>'9') throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		}
		while (!isSpaceChar(c)); return res * sgn;
	}
	
	public long readLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
        }
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
        }
		while (!isSpaceChar(c));
            return res * sgn;
    }
	
	public double readDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
        }
		double res = 0;
		while (!isSpaceChar(c) && c != '.') {
			if (c == 'e' || c == 'E')
				return res * Math.pow(10, readInt());
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
        }
		if (c == '.') {
			c = read();
			double m = 1;
			while (!isSpaceChar(c)) {
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, readInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				m /= 10;
				res += (c - '0') * m;
				c = read();
            }
        }
		return res * sgn;
    }
	
	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
 
	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
	public String next() {
		return readString();
	}
	
	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}
